// See https://aka.ms/new-console-template for more information
using System.Diagnostics;

namespace lyricism
{
    public class Program
    {
        public enum PostDataType
        {
            Json,
            Form
        }

        internal static string CacheDir = System.IO.Path.Join(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), ".cache", "lyricism");
        internal static string TokensPath = System.IO.Path.Join(CacheDir, "tokens.json");

        /// <param name="artistName"></param>
        /// <param name="trackName"></param>
        /// <param name="site"></param>
        /// <param name="noCache"></param>
        /// <param name="clearCache"></param>
        /// <param name="spotifyAuth"></param>
        public static void Main(string artistName, string trackName, string site, bool noCache, bool clearCache, bool spotifyAuth)
        {
            // , string albumName
            string albumName = null;

            if (spotifyAuth)
            {
                Spotify.SpotifyAuth();
                return;
            }

            if (string.IsNullOrWhiteSpace(artistName) && string.IsNullOrWhiteSpace(trackName) && !clearCache)
            {
                if (System.IO.File.Exists(TokensPath))
                {
                    var playing = Spotify.GetCurrentlyPlayingDeets();
                        if (playing == null)
                        {
                            Console.WriteLine("Spotify isn't playing.");
                            return;
                        }
                    else if (playing.IsEpisode)
                    {
                        // TODO theoretically if this were a music podcast
                        // track details *could* be discerned by parsing the show notes and looking at the track progress
                        // not sure the juice is worth the squeeze, as it were
                        Console.WriteLine("Cannot retrive lyrics for a podcast.");
                        return;
                    }
                    artistName = playing.ArtistName;
                    trackName = playing.TrackName;
                }
                else
                {
                    // TODO update help description somehow
                    Console.WriteLine("Missing required arguments.");
                    System.CommandLine.DragonFruit.CommandLine.ExecuteAssembly(typeof(AutoGeneratedProgram).Assembly, new string[] { "--help" }, "");
                    return;
                }
            }

            if (clearCache)
            {
                System.IO.Directory.Delete(Program.CacheDir, true);
                Console.WriteLine("Cache cleared.");
                return;
            }

            var extractors = AppDomain.CurrentDomain.GetAssemblies().SelectMany(x => x.GetTypes())
                  .Where(x => typeof(LyricExtractor).IsAssignableFrom(x) && !x.IsInterface && !x.IsAbstract)
                  .Select(x => x.GetConstructors().First().Invoke(new object[] { artistName, trackName, albumName }))
                  .Cast<LyricExtractor>()
                  .Where(x => x != null)
                  .Where(x => 1 == 2
                              || (!string.IsNullOrWhiteSpace(site) && x.SourceName.Contains(site, StringComparison.InvariantCultureIgnoreCase))
                              || (string.IsNullOrWhiteSpace(site) && x.Active)
                              )
                  .Where(x => !noCache || !x.IsCache)
                  .OrderBy(x => x.Order)
                  .ToList();
            
            Console.WriteLine("Searching for: " + artistName + " - " + trackName);

            LyricExtractor ex = null;
            var i = 0;
            foreach (var extra in extractors)
            {
                i+=1;
                // TODO make this a percent
                Console.Write("\rChecking sources: " + i.ToString());
                if (!string.IsNullOrWhiteSpace(extra.Lyrics))
                {
                    ex = extra;
                    break;
                }
            }
            Console.WriteLine();

            if (ex == null)
            {
                Console.WriteLine("Could not find lyrics.");
                return;
            }

            Console.WriteLine("-".Repeat(30));

            Console.WriteLine(ex.ArtistName + " - " + ex.TrackName);
            if (!ex.IsCache)
                Console.WriteLine("    " + ex.SourceName);
            else
                Console.WriteLine("    " + ex.SubSourceName + " (cached)");
            Console.WriteLine("-".Repeat(30));
            Console.WriteLine(ex.Lyrics);

            if (!noCache)
                ex.Cache();
        }
    }
}
