// See https://aka.ms/new-console-template for more information
using System.Diagnostics;

namespace lyricism
{
    public class Program
    {
        public enum PostDataType
        {
            Json,
            Form
        }

        internal static string CacheDir = System.IO.Path.Join(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), ".cache", "lyricism");
        static void Main(string artistName, string trackName, string site, bool noCache, bool clearCache)
        {
            // , string albumName
            string albumName = null;

            var homeDir = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
            Program.CacheDir = System.IO.Path.Join(homeDir, ".cache", "lyricism");

            if (string.IsNullOrWhiteSpace(artistName) && string.IsNullOrWhiteSpace(trackName) && !clearCache)
            {
                Console.WriteLine("Missing required arguments.");
                System.CommandLine.DragonFruit.CommandLine.ExecuteAssembly(typeof(AutoGeneratedProgram).Assembly, new string[] { "--help" }, "");
                return;
            }

            if (clearCache)
            {
                System.IO.Directory.Delete(Program.CacheDir, true);
                Console.WriteLine("Cache cleared.");
                return;
            }

            var extractors = AppDomain.CurrentDomain.GetAssemblies().SelectMany(x => x.GetTypes())
                  .Where(x => typeof(LyricExtractor).IsAssignableFrom(x) && !x.IsInterface && !x.IsAbstract)
                  .Select(x => x.GetConstructors().First().Invoke(new object[] { artistName, trackName, albumName }))
                  .Cast<LyricExtractor>()
                  .Where(x => x != null)
                  .Where(x => 1 == 2
                              || (!string.IsNullOrWhiteSpace(site) && x.SourceName.Contains(site, StringComparison.InvariantCultureIgnoreCase))
                              || (string.IsNullOrWhiteSpace(site) && x.Active)
                              )
                  .Where(x => !noCache || !x.IsCache)
                  .OrderBy(x => x.Order)
                  .ToList();

            LyricExtractor ex = null;
            var i = 0;
            foreach (var extra in extractors)
            {
                i+=1;
                Console.Write("\rChecking sources: " + i.ToString());
                if (!string.IsNullOrWhiteSpace(extra.Lyrics))
                {
                    Console.WriteLine();
                    ex = extra;
                    break;
                }
            }
            Console.WriteLine();

            if (ex == null)
            {
                Console.WriteLine("Could not find lyrics.");
                return;
            }

            Console.WriteLine(ex.ArtistName + " - " + ex.TrackName);
            if (!ex.IsCache)
                Console.WriteLine("    " + ex.SourceName);
            else
                Console.Write("    " + ex.SubSourceName + " (cached)");
            Console.WriteLine();
            Console.WriteLine("-----------");
            Console.WriteLine();
            Console.WriteLine(ex.Lyrics);

            if (!noCache)
                ex.Cache();
        }
    }
}
